See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (3 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 162 warnings)

Correctness:  38/64 tests passed
Memory:       10/10 tests passed
Timing:       118/159 tests passed

Aggregate score: 70.47%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.6K Jan  7 19:49 BurrowsWheeler.java
3.6K Jan  7 19:49 CircularSuffixArray.java
2.0K Jan  7 19:49 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'lcpSuffix()' is never called.  At CircularSuffixArray.java:[lines 77-81]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'compare()' is never called.  At CircularSuffixArray.java:[lines 87-92]
M P SBSC_USE_STRINGBUFFER_CONCATENATION SBSC: Builds a 'String' object using the '+' operator in a loop, which can take time quadratic in the length of the resulting string. Instead, use 'StringBuilder'.  At BurrowsWheeler.java:[line 14]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
CircularSuffixArray.java:7: The private instance (or static) variable 'suffixes' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:76: Avoid unused private methods, such as 'lcpSuffix(Suffix,Suffix)'. [UnusedPrivateMethod]
CircularSuffixArray.java:86: Avoid unused private methods, such as 'compare(String,Suffix)'. [UnusedPrivateMethod]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:9:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:13:10: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:13:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:14:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] BurrowsWheeler.java:18:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:18:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:18:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:18:17: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:18:18: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:18:19: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:18:31: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:18:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:19:9: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:26:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:26:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:26:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:26:17: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:26:18: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:26:19: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:26:31: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:26:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:37:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:39:11: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:40:12: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:41:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:41:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:41:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:41:19: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:41:20: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:42:12: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:42:13: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:50:19: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:51:13: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:52:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:52:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:52:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:52:19: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:52:20: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:52:34: '{' is not preceded with whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 160 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:43:16: You will probably not meet the performance requirement for 'inverseTransform()' if you call 'Arrays.sort()'. [Performance]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------
[WARN] MoveToFront.java:1: Declaring 1 non-final static variables ('A') suggests poor design in this class. [StaticVariableCount]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 6: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
==> passed

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 11: check that CircularSuffixArray is immutable
  * string = "OLGHCJSJQBFKEIVQPJUEQLGEHJCXVT"
  * string = "AAABABBBAAAABABBBBBABAAAAAAABB"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: 67 4a 97 c1 47 2f d3 3e fb 94 88 70 0e 6f 3a 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 15/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 23 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 2b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 3a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 3b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 3d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 4b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 4c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 5b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 7a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 7c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 26 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 2b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 3c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 3e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 3f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 4a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 4c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 4d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 5b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 5c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 6a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 7a: check transform() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt


Total: 0/26 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          776
=> passed       32         1448
=> passed       64         2792
=> passed      128         5480
=> passed      256        10856
=> passed      512        21608
=> passed     1024        43112
=> passed     2048        86120
=> passed     4096       172136
=> passed     8192       344168
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 42.00 n + 104.00   (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      20.30
=> passed     2000       0.01       0.00       5.48
=> passed     4000       0.01       0.00       4.79
=> passed     8000       0.01       0.00       3.20
=> passed    16000       0.02       0.01       2.82
=> passed    32000       0.04       0.01       3.57
=> passed    64000       0.09       0.01       6.30
=> FAILED   128000       0.33       0.01      24.89
=> FAILED   256000       0.47       0.04      13.42
=> passed   512000       0.60       0.06      10.94
=> FAILED  1024000       1.54       0.12      13.17
=> FAILED  2048000       4.22       0.29      14.52
=> FAILED  4096000      10.20       0.91      11.21

Estimated running time (using last 6 measurements)
    = 1.51e-06 * n^1.02  (R^2 = 0.95)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       6.96
=> passed     2000       0.00       0.00       2.50
=> passed     4000       0.00       0.00       2.34
=> passed     8000       0.00       0.00       4.65
=> passed    16000       0.01       0.00       6.42
=> passed    32000       0.02       0.00       8.48
=> passed    64000       0.05       0.00      10.86
=> passed   128000       0.11       0.01       8.86
=> passed   256000       0.25       0.04       5.63
=> passed   512000       0.38       0.04       9.82
=> passed  1024000       0.81       0.06      14.62
=> passed  2048000       2.85       0.20      14.54
=> passed  4096000       6.67       0.34      19.76

Estimated running time (using last 6 measurements)
    = 8.48e-08 * n^1.18  (R^2 = 0.98)


Total: 21/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.66
=> passed     2000       0.00       0.00       0.99
=> passed     4000       0.00       0.00       1.00
=> passed     8000       0.01       0.01       1.00
=> passed    16000       0.02       0.02       1.00
=> passed    32000       0.04       0.04       0.99
=> passed    64000       0.07       0.07       1.00
=> passed   128000       0.14       0.15       0.97
=> passed   256000       0.28       0.29       0.97

Estimated running time (using last 6 measurements)
     = 1.48e-06 * n^0.98  (R^2 = 1.00)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.93
=> passed     2000       0.00       0.00       0.94
=> passed     4000       0.00       0.00       0.94
=> passed     8000       0.01       0.01       0.94
=> passed    16000       0.02       0.02       0.94
=> passed    32000       0.03       0.03       0.95
=> passed    64000       0.06       0.07       0.96
=> passed   128000       0.12       0.13       0.94
=> passed   256000       0.23       0.25       0.92

Estimated running time (using last 6 measurements)
     = 1.15e-06 * n^0.98  (R^2 = 1.00)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.91
=> passed     2000       0.00       0.00       0.94
=> passed     4000       0.00       0.00       1.05
=> passed     8000       0.01       0.01       0.93
=> passed    16000       0.02       0.02       0.94
=> passed    32000       0.03       0.03       0.95
=> passed    64000       0.06       0.06       0.98
=> passed   128000       0.12       0.13       0.95
=> passed   256000       0.24       0.25       0.96

Estimated running time (using last 6 measurements)
     = 1.61e-06 * n^0.96  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.90
=> passed     2000       0.00       0.00       0.92
=> passed     4000       0.00       0.00       0.92
=> passed     8000       0.01       0.01       0.92
=> passed    16000       0.01       0.02       0.92
=> passed    32000       0.03       0.03       0.92
=> passed    64000       0.06       0.06       0.94
=> passed   128000       0.11       0.12       0.93
=> passed   256000       0.23       0.24       0.94

Estimated running time (using last 6 measurements)
     = 8.36e-07 * n^1.00  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.12
=> passed     2000       0.00       0.00       0.91
=> passed     4000       0.00       0.00       0.83
=> passed     8000       0.00       0.00       0.95
=> passed    16000       0.01       0.01       1.17
=> passed    32000       0.01       0.01       1.01
=> passed    64000       0.02       0.02       0.85
=> passed   128000       0.02       0.02       0.90
=> passed   256000       0.04       0.04       0.99
=> passed   512000       0.08       0.08       0.97
=> passed  1024000       0.17       0.17       1.02
=> passed  2048000       0.42       0.42       1.01
=> passed  4096000       0.83       0.95       0.88

Estimated running time as a function of n (using last 6 measurements)
    = 5.80e-08 * n^1.08  (R^2 = 1.00)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.75
=> passed     2000       0.00       0.00       0.80
=> passed     4000       0.00       0.00       0.95
=> passed     8000       0.00       0.00       1.09
=> passed    16000       0.00       0.00       0.92
=> passed    32000       0.01       0.00       1.36
=> passed    64000       0.02       0.02       0.92
=> passed   128000       0.02       0.02       0.97
=> passed   256000       0.04       0.04       1.02
=> passed   512000       0.09       0.09       1.05
=> passed  1024000       0.19       0.20       0.97
=> passed  2048000       0.47       0.48       0.97
=> passed  4096000       1.07       1.12       0.96

Estimated running time as a function of n (using last 6 measurements)
    = 3.26e-08 * n^1.13  (R^2 = 1.00)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.86
=> passed     2000       0.00       0.00       1.00
=> passed     4000       0.00       0.00       0.90
=> passed     8000       0.00       0.00       0.98
=> passed    16000       0.00       0.00       0.94
=> passed    32000       0.00       0.00       0.40
=> passed    64000       0.00       0.00       0.91
=> passed   128000       0.00       0.00       0.88
=> passed   256000       0.01       0.01       0.90
=> passed   512000       0.01       0.02       0.60
=> passed  1024000       0.02       0.03       0.90
=> passed  2048000       0.05       0.05       0.90
=> passed  4096000       0.10       0.13       0.78

Estimated running time as a function of n (using last 6 measurements)
    = 2.82e-08 * n^0.99  (R^2 = 1.00)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       3.00
=> passed     2000       0.00       0.00       3.69
=> passed     4000       0.00       0.00       6.99
=> passed     8000       0.02       0.00      13.66
=> passed    16000       0.07       0.00      25.36
=> FAILED    32000       0.26       0.00     172.15
=> FAILED    64000       1.27       0.00     424.33
=> FAILED   128000       6.10       0.00    1533.56
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 1.18e-10 * n^2.09  (R^2 = 1.00)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00      11.30
=> passed     2048       0.00       0.00      29.99
=> passed     4096       0.01       0.00      56.68
=> passed     8192       0.02       0.00      99.62
=> passed    16384       0.09       0.00     179.48
=> FAILED    32768       0.36       0.00     462.88
=> FAILED    65536       1.34       0.00     722.61
=> FAILED   131072       5.33       0.01     869.72
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 3.41e-10 * n^1.99  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       5.27
=> passed     2000       0.00       0.00      25.77
=> passed     4000       0.01       0.00      34.46
=> passed     8000       0.02       0.00      68.79
=> passed    16000       0.07       0.00     126.43
=> FAILED    32000       0.30       0.00     254.27
=> FAILED    64000       1.18       0.00     521.33
=> FAILED   128000       5.16       0.00    1835.29
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 3.75e-10 * n^1.98  (R^2 = 1.00)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00      13.68
=> passed     2048       0.00       0.00      16.53
=> passed     4096       0.00       0.00      42.87
=> passed     8192       0.01       0.00      85.12
=> passed    16384       0.06       0.00      64.96
=> FAILED    32768       0.23       0.00     192.34
=> FAILED    65536       0.91       0.00     291.95
=> FAILED   131072       3.66       0.01     517.76
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 2.70e-10 * n^1.98  (R^2 = 1.00)


Total: 59/95 tests passed!


================================================================
