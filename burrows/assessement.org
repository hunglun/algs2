See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (3 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 166 warnings)

Correctness:  38/64 tests passed
Memory:       10/10 tests passed
Timing:       120/159 tests passed

Aggregate score: 70.72%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
3.4K Jan  7 21:25 BurrowsWheeler.java
3.6K Jan  7 21:25 CircularSuffixArray.java
2.0K Jan  7 21:25 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'lcpSuffix()' is never called.  At CircularSuffixArray.java:[lines 77-81]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'compare()' is never called.  At CircularSuffixArray.java:[lines 87-92]
M P SBSC_USE_STRINGBUFFER_CONCATENATION SBSC: Builds a 'String' object using the '+' operator in a loop, which can take time quadratic in the length of the resulting string. Instead, use 'StringBuilder'.  At BurrowsWheeler.java:[line 15]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
CircularSuffixArray.java:7: The private instance (or static) variable 'suffixes' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:76: Avoid unused private methods, such as 'lcpSuffix(Suffix,Suffix)'. [UnusedPrivateMethod]
CircularSuffixArray.java:86: Avoid unused private methods, such as 'compare(String,Suffix)'. [UnusedPrivateMethod]
PMD ends with 3 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:4:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]
[WARN] BurrowsWheeler.java:10:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:14:10: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:14:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:15:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] BurrowsWheeler.java:19:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:19:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:19:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:19:17: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:19:18: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:19:19: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:19:31: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:19:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:20:9: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:27:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:27:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:27:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:27:17: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:27:18: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:27:19: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:27:31: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:27:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:69:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:75:10: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:75:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:83:11: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:84:12: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:85:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:85:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:85:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:85:19: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:85:20: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:85:30: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:86:10: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:86:11: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:90:19: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:91:13: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:92:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:92:14: '=' is not preceded with whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 164 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:73:5: You should not need to use the 'StringBuilder' data type in this program. [Design]
Checkstyle ends with 0 errors and 1 warning.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------
[WARN] MoveToFront.java:1: Declaring 1 non-final static variables ('A') suggests poor design in this class. [StaticVariableCount]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 6: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
==> passed

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 11: check that CircularSuffixArray is immutable
  * string = "TPRRJABJPNKXZURIIMYCAJNMRIYMSN"
  * string = "BBABBBAAAAAABBBABBAAABBABAABBB"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: d2 a8 98 fe c5 e9 4a 0b b7 2e 71 e3 d7 eb 2a 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 15/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 23 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 2b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 3a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 3b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 3d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 4b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 4c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 5b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 7a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 7c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 26 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
  * java BurrowsWheeler - < zebra.txt
  * java BurrowsWheeler - < cadabra.txt
  * java BurrowsWheeler - < amendments.txt
==> passed

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 2b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3a: check transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 3b: check transform() on corner-case text files
  * alphanum.txt
  * a.txt
==> passed

Test 3c: check transform() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3d: check transform() on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 3e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 3f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
  * 5 random strings from binary alphabet
  * 5 random strings from DNA alphabet
  * 5 random strings from uppercase alphabet
==> passed

Test 4a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 4c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 4d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check that inverseTransform(transform()) = original on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 5b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt
  * a.txt
  * stars.txt
  * couscous.txt
==> passed

Test 5c: check that inverseTransform(transform()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 5e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet
  * random strings from binary alphabet
  * random strings from DNA alphabet
  * random strings from uppercase alphabet
==> passed

Test 6a: check that transform() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 7a: check transform() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.



Total: 0/26 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          776
=> passed       32         1448
=> passed       64         2792
=> passed      128         5480
=> passed      256        10856
=> passed      512        21608
=> passed     1024        43112
=> passed     2048        86120
=> passed     4096       172136
=> passed     8192       344168
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 42.00 n + 104.00   (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      12.63
=> passed     2000       0.00       0.00       4.24
=> passed     4000       0.01       0.00       4.72
=> passed     8000       0.01       0.00       2.97
=> passed    16000       0.01       0.00       3.21
=> passed    32000       0.03       0.01       4.11
=> FAILED    64000       0.15       0.01      14.35
=> passed   128000       0.26       0.03      10.09
=> passed   256000       0.37       0.04      10.27
=> passed   512000       0.80       0.08      10.45
=> passed  1024000       1.83       0.17      10.63
=> FAILED  2048000       4.25       0.28      15.13
=> passed  4096000       6.83       0.76       8.97

Estimated running time (using last 6 measurements)
    = 1.53e-06 * n^1.01  (R^2 = 0.99)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       7.98
=> passed     2000       0.00       0.00       4.39
=> passed     4000       0.00       0.00       2.81
=> passed     8000       0.00       0.00       4.69
=> passed    16000       0.01       0.00       7.02
=> passed    32000       0.02       0.00      10.98
=> passed    64000       0.04       0.00      11.16
=> passed   128000       0.08       0.01       9.52
=> passed   256000       0.18       0.03       5.55
=> passed   512000       0.42       0.04       9.67
=> passed  1024000       0.88       0.06      14.98
=> passed  2048000       1.99       0.15      13.11
=> passed  4096000       4.79       0.33      14.74

Estimated running time (using last 6 measurements)
    = 7.33e-08 * n^1.18  (R^2 = 1.00)


Total: 24/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.68
=> passed     2000       0.00       0.00       0.99
=> passed     4000       0.00       0.00       1.00
=> passed     8000       0.01       0.01       1.00
=> passed    16000       0.02       0.02       1.03
=> passed    32000       0.09       0.08       1.15
=> passed    64000       0.07       0.08       0.98
=> passed   128000       0.16       0.16       0.97
=> passed   256000       0.28       0.31       0.90

Estimated running time (using last 6 measurements)
     = 2.37e-06 * n^0.95  (R^2 = 0.93)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.92
=> passed     2000       0.00       0.00       0.96
=> passed     4000       0.00       0.00       0.94
=> passed     8000       0.01       0.01       0.95
=> passed    16000       0.02       0.02       1.01
=> passed    32000       0.03       0.04       0.94
=> passed    64000       0.06       0.07       0.90
=> passed   128000       0.12       0.12       0.94
=> passed   256000       0.24       0.27       0.88

Estimated running time (using last 6 measurements)
     = 1.75e-06 * n^0.95  (R^2 = 1.00)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.96
=> passed     2000       0.00       0.00       0.92
=> passed     4000       0.00       0.00       0.90
=> passed     8000       0.01       0.01       0.95
=> passed    16000       0.02       0.02       0.99
=> passed    32000       0.03       0.03       0.96
=> passed    64000       0.07       0.07       1.02
=> passed   128000       0.14       0.16       0.85
=> passed   256000       0.26       0.29       0.92

Estimated running time (using last 6 measurements)
     = 9.97e-07 * n^1.01  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.95
=> passed     2000       0.00       0.00       0.88
=> passed     4000       0.00       0.00       0.93
=> passed     8000       0.01       0.01       0.93
=> passed    16000       0.02       0.02       0.94
=> passed    32000       0.03       0.03       0.89
=> passed    64000       0.06       0.06       1.02
=> passed   128000       0.12       0.13       0.93
=> passed   256000       0.24       0.26       0.92

Estimated running time (using last 6 measurements)
     = 9.24e-07 * n^1.00  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
  * amendments.txt
==> passed

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.10
=> passed     2000       0.00       0.00       0.74
=> passed     4000       0.00       0.00       0.58
=> passed     8000       0.00       0.00       0.69
=> passed    16000       0.00       0.01       0.60
=> passed    32000       0.01       0.01       0.61
=> passed    64000       0.01       0.02       0.71
=> passed   128000       0.02       0.03       0.73
=> passed   256000       0.04       0.04       0.94
=> passed   512000       0.09       0.09       0.95
=> passed  1024000       0.18       0.19       0.98
=> passed  2048000       0.48       0.48       1.00
=> passed  4096000       1.14       0.92       1.24

Estimated running time as a function of n (using last 6 measurements)
    = 1.93e-08 * n^1.17  (R^2 = 1.00)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.64
=> passed     2000       0.00       0.00       0.85
=> passed     4000       0.00       0.00       0.71
=> passed     8000       0.00       0.00       0.83
=> passed    16000       0.00       0.00       0.96
=> passed    32000       0.01       0.00       2.96
=> passed    64000       0.02       0.01       1.16
=> passed   128000       0.03       0.03       1.01
=> passed   256000       0.06       0.06       0.91
=> passed   512000       0.17       0.11       1.54
=> passed  1024000       0.27       0.47       0.57
=> passed  2048000       0.49       0.65       0.75
=> passed  4096000       1.36       1.38       0.99

Estimated running time as a function of n (using last 6 measurements)
    = 1.69e-07 * n^1.04  (R^2 = 0.99)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.76
=> passed     2000       0.00       0.00       0.81
=> passed     4000       0.00       0.00       1.00
=> passed     8000       0.00       0.00       1.04
=> passed    16000       0.00       0.00       0.93
=> passed    32000       0.00       0.00       0.88
=> passed    64000       0.00       0.00       0.51
=> passed   128000       0.00       0.00       0.80
=> passed   256000       0.01       0.01       0.94
=> passed   512000       0.03       0.02       1.78
=> passed  1024000       0.03       0.03       0.86
=> passed  2048000       0.05       0.06       0.88
=> passed  4096000       0.12       0.19       0.63

Estimated running time as a function of n (using last 6 measurements)
    = 3.87e-08 * n^0.98  (R^2 = 0.95)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       2.90
=> passed     2000       0.00       0.00       4.29
=> passed     4000       0.01       0.00       9.45
=> passed     8000       0.03       0.00      20.13
=> passed    16000       0.10       0.00      27.09
=> FAILED    32000       0.37       0.00     168.74
=> FAILED    64000       1.74       0.00     543.24
=> FAILED   128000       8.64       0.00    2217.88
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 2.28e-10 * n^2.06  (R^2 = 1.00)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00      22.55
=> passed     2048       0.01       0.00      68.27
=> passed     4096       0.02       0.00     134.84
=> passed     8192       0.08       0.00     247.21
=> FAILED    16384       0.19       0.00     270.42
=> FAILED    32768       0.73       0.00     514.39
=> FAILED    65536       2.45       0.00     773.70
=> FAILED   131072
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 1.03e-08 * n^1.74  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00      16.47
=> passed     2000       0.00       0.00      30.52
=> passed     4000       0.01       0.00      61.74
=> passed     8000       0.02       0.00     114.92
=> passed    16000       0.08       0.00     217.37
=> FAILED    32000       0.36       0.00     480.05
=> FAILED    64000       1.31       0.00     888.68
=> FAILED   128000       5.39       0.01     938.82
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 4.05e-10 * n^1.98  (R^2 = 1.00)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       9.15
=> passed     2048       0.01       0.00      96.37
=> passed     4096       0.00       0.00      28.66
=> passed     8192       0.02       0.00      43.19
=> passed    16384       0.07       0.00      19.03
=> FAILED    32768       0.26       0.00     164.67
=> FAILED    65536       1.05       0.00     347.48
=> FAILED   131072       4.31       0.02     265.54
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 3.14e-10 * n^1.98  (R^2 = 1.00)


Total: 58/95 tests passed!


================================================================


