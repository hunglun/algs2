See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (3 warnings)
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 157 warnings)

Correctness:  37/64 tests passed
Memory:       10/10 tests passed
Timing:       118/159 tests passed

Aggregate score: 69.53%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
2.5K Jan  7 19:30 BurrowsWheeler.java
5.2K Jan  7 19:30 CircularSuffixArray.java
2.0K Jan  7 19:30 MoveToFront.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac CircularSuffixArray.java
*-----------------------------------------------------------

% javac BurrowsWheeler.java
*-----------------------------------------------------------

% javac MoveToFront.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
CircularSuffixArray:

BurrowsWheeler:

MoveToFront:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'select()' is never called.  At CircularSuffixArray.java:[lines 102-103]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'lcp()' is never called.  At CircularSuffixArray.java:[lines 82-83]
L P UPM_UNCALLED_PRIVATE_METHOD UPM: The private method 'rank()' is never called.  At CircularSuffixArray.java:[lines 114-122]
Warnings generated: 3


================================================================


% pmd .
*-----------------------------------------------------------
CircularSuffixArray.java:7: The private instance (or static) variable 'suffixes' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
CircularSuffixArray.java:81: Avoid unused private methods, such as 'lcp(int)'. [UnusedPrivateMethod]
CircularSuffixArray.java:101: Avoid unused private methods, such as 'select(int)'. [UnusedPrivateMethod]
CircularSuffixArray.java:113: Avoid unused private methods, such as 'rank(String)'. [UnusedPrivateMethod]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:10:33: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:15:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:15:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:15:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:15:17: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:15:18: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:15:19: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:15:31: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:15:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:16:9: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:23:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:23:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:23:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:23:17: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:23:18: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:23:19: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:23:31: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:23:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:34:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:36:11: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:37:12: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:38:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:38:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:38:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:38:19: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:38:20: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:39:12: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:39:13: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:47:19: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:48:13: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BurrowsWheeler.java:49:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:49:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:49:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:49:19: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:49:20: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:49:34: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:50:10: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BurrowsWheeler.java:50:16: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BurrowsWheeler.java:50:17: '=' is not followed by whitespace. [WhitespaceAround]
...
Checkstyle ends with 0 errors and 154 warnings.

% custom checkstyle checks for CircularSuffixArray.java
*-----------------------------------------------------------

% custom checkstyle checks for BurrowsWheeler.java
*-----------------------------------------------------------
[WARN] BurrowsWheeler.java:12:29: You must use 'BinaryStdIn' for all input in this program. [SideEffect]
[WARN] BurrowsWheeler.java:40:16: You will probably not meet the performance requirement for 'inverseTransform()' if you call 'Arrays.sort()'. [Performance]
Checkstyle ends with 0 errors and 2 warnings.

% custom checkstyle checks for MoveToFront.java
*-----------------------------------------------------------
[WARN] MoveToFront.java:1: Declaring 1 non-final static variables ('A') suggests poor design in this class. [StaticVariableCount]
Checkstyle ends with 0 errors and 1 warning.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of CircularSuffixArray
*-----------------------------------------------------------
Running 15 total tests.

Test 1: check index() and length() with random binary strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 2: check index() and length() with random uppercase strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 3: check index() and length() with random ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 4: check index() and length() with random extended ASCII strings
  * length = 10
  * length = 100
  * length = 1000
==> passed

Test 5: check index() and length() with strings from text files
  * cadabra.txt
  * amendments.txt
  * moby1.txt
  * dickens1000.txt
==> passed

Test 6: check index() and length() with strings from binary files
  * us.gif
  * CS_bricks.jpg
  * rand1K.bin
==> passed

Test 7: check index() and length() with random strings of length 0, 1, and 2
  * length = 0
  * length = 1
  * length = 2
==> passed

Test 8: check that index() throws an exception when argument is out of bounds
  * string of length 10
  * string of length 100
  * string of length 2
  * string of length 1
  * string of length 0
==> passed

Test 9: check that constructor throws an exception when argument is null
    - throws the wrong exception when calling constructor with a null argument
    - throws a java.lang.NullPointerException
    - should throw a java.lang.IllegalArgumentException

==> FAILED

Test 10: check that two CircularSuffixArray objects can be created at the same time
  * cadabra.txt and amendments.txt
  * amendments.txt and cadabra.txt
  * dickens1000.txt and cadabra.txt
==> passed

Test 11: check that CircularSuffixArray is immutable
  * string = "BDHNKIQVTWELGSKPSCDNTEYOKKMQHD"
  * string = "AABBBABABBAAAABBBBAAAABBBABAAB"
  * string = "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"
  * string = hex representation: a5 be 9b 70 af e8 0c cb c7 0d a8 fa 9f ec 53 
==> passed

Test 12: check index() and length() with corner-case strings
  * a.txt
  * nomatch.txt
  * zebra.txt
  * alphanum.txt
==> passed

Test 13: check index() and length() with strings that are nontrivial circular
         that are nontrivial circular suffixes of themselves
  * stars.txt
  * couscous.txt
==> passed

Test 14: check index() and length() with unary strings
  * length 10 string over unary alphabet
  * length 100 string over unary alphabet
  * length 1000 string over unary alphabet
==> passed

Test 15: check index() and length() with random strings
         that are nontrivial circular suffixes of themselves
  * length 2 string over binary alphabet, repeated 2 times
  * length 2 string over binary alphabet, repeated 10 times
  * length 5 string over binary alphabet, repeated 2 times
  * length 5 string over binary alphabet, repeated 3 times
  * length 5 string over binary alphabet, repeated 5 times
  * length 7 string over uppercase alphabet, repeated 2 times
  * length 7 string over uppercase alphabet, repeated 3 times
  * length 7 string over uppercase alphabet, repeated 5 times
==> passed

Total: 14/15 tests passed!


================================================================
Testing correctness of MoveToFront
*-----------------------------------------------------------
Running 23 total tests.

Test 1a: check main() on text files
  * java MoveToFront - < abra.txt
  * java MoveToFront - < zebra.txt
  * java MoveToFront - < amendments.txt
  * java MoveToFront - < aesop.txt
==> passed

Test 1b: check main() on text files
  * java MoveToFront + < abra.txt.mtf
  * java MoveToFront + < zebra.txt.mtf
  * java MoveToFront + < amendments.txt.mtf
  * java MoveToFront + < aesop.txt.mtf
==> passed

Test 2a: check that main() is consistent with encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
==> passed

Test 2b: check that main() is consistent with decode() on text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 3a: check encode() on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 3b: check encode() on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 3c: check encode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 3d: check encode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4a: check decode() on move-to-front-encoded text files
  * abra.txt.mtf
  * zebra.txt.mtf
  * amendments.txt.mtf
  * aesop.txt.mtf
  * stars.txt.mtf
  * alphanum.txt.mtf
  * a.txt.mtf
==> passed

Test 4b: check decode() on move-to-front encoded binary files
  * us.gif.mtf
  * CS_bricks.jpg.mtf
  * rand10K.bin.mtf
==> passed

Test 4c: check decode() on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4d: check decode() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 4e: check decode() on random inputs
         that were encoded with move-to-front
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 1000 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 4f: check decode() on more random inputs
         that were encoded with move-to-front
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check whether decode(encode()) = original on text files
  * abra.txt
  * zebra.txt
  * amendments.txt
  * aesop.txt
  * stars.txt
  * alphanum.txt
  * a.txt
==> passed

Test 5b: check whether decode(encode()) = original on binary files
  * us.gif
  * CS_bricks.jpg
  * rand10K.bin
==> passed

Test 5c: check that decode(encode()) = original on random inputs
  * 10 random characters from { A } alphabet
  * 10 random characters from { A, B } alphabet
  * 10 random characters from { A, T, C, G } alphabet
  * 10 random characters from uppercase letter alphabet
  * 100 random characters from { A } alphabet
  * 1000 random characters from { A, B } alphabet
  * 1000 random characters from { A, T, C, G } alphabet
  * 1000 random characters from uppercase letter alphabet
==> passed

Test 5d: check that decode(encode()) = original on random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 6a: check that encode() calls either close() or flush()
  * amendments.txt
  * aesop.txt
==> passed

Test 6b: check that decode() calls either close() or flush()
  * amendments.txt.mtf
  * aesop.txt.mtf
==> passed

Test 7a: check encode() on large files
  * rand100K.bin
  * world192.txt
==> passed

Test 7b: check decode() on large files
  * rand100K.bin.mtf
  * world192.txt.mtf
==> passed

Test 7c: check whether decode(encode()) = original on large files
  * rand100K.bin
  * world192.txt
==> passed


Total: 23/23 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference CircularSuffixArray)
********************************************************************************

Testing correctness of BurrowsWheeler
*-----------------------------------------------------------
Running 26 total tests.

Test 1a: check main() on text files
  * java BurrowsWheeler - < abra.txt
    - student   length = 0
    - reference length = 16
    - student:   
    - reference: 00 00 00 03 41 52 44 21 52 43 41 41 41 41 42 42 

  * java BurrowsWheeler - < zebra.txt
    - student   length = 0
    - reference length = 9
    - student:   
    - reference: 00 00 00 04 72 65 7a 62 61 

  * java BurrowsWheeler - < cadabra.txt
    - student   length = 0
    - reference length = 16
    - student:   
    - reference: 00 00 00 08 41 52 44 21 52 43 41 41 41 41 42 42 

  * java BurrowsWheeler - < amendments.txt
    - student   length = 0
    - reference length = 18373
    - student:   
    - reference: 00 00 0e 2b 3a 2e 2e 2e 2e .. 69 69 69 69 69 69 69 69 69 

==> FAILED

Test 1b: check main() on text files
  * java BurrowsWheeler + < abra.txt.bwt
  * java BurrowsWheeler + < zebra.txt.bwt
  * java BurrowsWheeler + < cadabra.txt.bwt
  * java BurrowsWheeler + < amendments.txt.bwt
==> passed

Test 2a: check that main() is consistent with transform() on text files
  * abra.txt
  * zebra.txt
  * cadabra.txt
  * amendments.txt
==> passed

Test 2b: check that main() is consistent with inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3a: check transform() on text files
  * abra.txt
    - student   length = 0
    - reference length = 16
    - student:   
    - reference: 00 00 00 03 41 52 44 21 52 43 41 41 41 41 42 42 

  * zebra.txt
    - student   length = 0
    - reference length = 9
    - student:   
    - reference: 00 00 00 04 72 65 7a 62 61 

  * cadabra.txt
    - student   length = 0
    - reference length = 16
    - student:   
    - reference: 00 00 00 08 41 52 44 21 52 43 41 41 41 41 42 42 

  * amendments.txt
    - student   length = 0
    - reference length = 18373
    - student:   
    - reference: 00 00 0e 2b 3a 2e 2e 2e 2e .. 69 69 69 69 69 69 69 69 69 

==> FAILED

Test 3b: check transform() on corner-case text files
  * alphanum.txt
    - student   length = 0
    - reference length = 40
    - student:   
    - reference: 00 00 00 0a 7a 30 31 32 33 .. 71 72 73 74 75 76 77 78 79 

  * a.txt
    - student   length = 0
    - reference length = 5
    - student:   
    - reference: 00 00 00 00 61 

==> FAILED

Test 3c: check transform() on binary files
  * us.gif
    - student   length = 0
    - reference length = 12404
    - student:   
    - reference: 00 00 0f 7d 2c 00 41 00 d5 .. 1f 33 ff 00 bf 0a 04 ff d6 

  * CS_bricks.jpg
    - student   length = 0
    - reference length = 24571
    - student:   
    - reference: 00 00 5f f0 01 00 00 00 01 .. 04 08 d9 07 81 0a 1e d8 00 

  * rand10K.bin
    - student   length = 0
    - reference length = 10004
    - student:   
    - reference: 00 00 04 25 c6 6c 5d e4 ce .. d5 1e b8 31 4d 9b 2e fe 08 

==> FAILED

Test 3d: check transform() on random inputs
  * 10 random characters from binary alphabet
    - student   length = 0
    - reference length = 14
    - student:   
    - reference: 00 00 00 05 42 41 41 42 42 41 42 42 42 41 

    - failed on trial 1 of 100
    - input = 'BABBBBBAAA'

  * 10 random characters from DNA alphabet
    - student   length = 0
    - reference length = 14
    - student:   
    - reference: 00 00 00 08 47 47 47 54 47 47 47 43 54 41 

    - failed on trial 1 of 100
    - input = 'TGCGGGGGAT'

  * 10 random characters from uppercase alphabet
    - student   length = 0
    - reference length = 14
    - student:   
    - reference: 00 00 00 00 59 4f 54 57 56 51 53 53 44 49 

    - failed on trial 1 of 100
    - input = 'DWQSVSTOIY'

  * 1000 random characters from binary alphabet
    - student   length = 0
    - reference length = 1004
    - student:   
    - reference: 00 00 02 a9 42 42 42 42 42 .. 42 41 42 41 41 42 42 42 41 

    - failed on trial 1 of 100

  * 1000 random characters from DNA alphabet
    - student   length = 0
    - reference length = 1004
    - student:   
    - reference: 00 00 02 0f 43 43 43 54 54 .. 47 47 41 54 41 47 47 41 47 

    - failed on trial 1 of 100

  * 1000 random characters from uppercase alphabet
    - student   length = 0
    - reference length = 1004
    - student:   
    - reference: 00 00 03 a6 48 4c 53 5a 43 .. 4e 47 4f 46 51 42 52 51 43 

    - failed on trial 1 of 100

==> FAILED

Test 3e: check transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
    - student   length = 0
    - reference length = 1004
    - student:   
    - reference: 00 00 00 10 7d 76 3c 26 69 .. 14 5d 1c 4d 07 65 32 6d 43 

    - failed on trial 1 of 100

  * 1000 random characters from extended ASCII alphabet
    - student   length = 0
    - reference length = 1004
    - student:   
    - reference: 00 00 02 4e 48 0e 64 24 c9 .. dd f4 10 97 02 1e 25 b6 5c 

    - failed on trial 1 of 100

  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
    - student   length = 0
    - reference length = 1004
    - student:   
    - reference: 00 00 02 9f 9b 96 32 0f 97 .. 51 a2 12 3d 2c c4 32 85 29 

    - failed on trial 1 of 100

  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
    - student   length = 0
    - reference length = 1004
    - student:   
    - reference: 00 00 03 c1 c7 7b 9d 35 8f .. 26 ec f4 83 a2 b2 a8 9e 36 

    - failed on trial 1 of 100

==> FAILED

Test 3f: check tranform() on random inputs that are circular
         shifts of themselves
  * 5 random strings from unary alphabet
    - student   length = 0
    - reference length = 14
    - student:   
    - reference: 00 00 00 07 41 41 41 41 41 41 41 41 41 41 

    - failed on trial 1 of 2
    - input = 'AAAAAAAAAA'

  * 5 random strings from binary alphabet
    - student   length = 0
    - reference length = 24
    - student:   
    - reference: 00 00 00 10 42 42 42 42 41 .. 41 42 42 42 42 41 41 41 41 

    - failed on trial 1 of 100
    - input = 'BBAAABBAAABBAAABBAAA'

  * 5 random strings from DNA alphabet
    - student   length = 0
    - reference length = 14
    - student:   
    - reference: 00 00 00 00 43 43 47 47 47 47 43 43 41 41 

    - failed on trial 1 of 100
    - input = 'AGCGCAGCGC'

  * 5 random strings from uppercase alphabet
    - student   length = 0
    - reference length = 14
    - student:   
    - reference: 00 00 00 00 48 48 51 51 4f 4f 42 42 4d 4d 

    - failed on trial 1 of 100
    - input = 'BOMQHBOMQH'

==> FAILED

Test 4a: check inverseTransform() on text files
  * abra.txt.bwt
  * zebra.txt.bwt
  * cadabra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 4b: check inverseTransform() on corner-case text files
  * alphanum.txt.bwt
  * a.txt.bwt
  * stars.txt.bwt
  * couscous.txt.bwt
==> passed

Test 4c: check inverseTransform() on binary files
  * us.gif.bwt
  * CS_bricks.jpg.bwt
  * rand10K.bin.bwt
==> passed

Test 4d: check inverseTransform() of transform() on random inputs
  * 10 random characters from unary alphabet
  * 10 random characters from binary alphabet
  * 10 random characters from DNA alphabet
  * 10 random characters from uppercase alphabet
  * 100 random characters from unary alphabet
  * 1000 random characters from binary alphabet
  * 1000 random characters from DNA alphabet
  * 1000 random characters from uppercase alphabet
==> passed

Test 4e: check inverseTransform() of transform() on more random inputs
  * 1000 random characters from ASCII alphabet 
  * 1000 random characters from extended ASCII alphabet
  * 1000 random characters from extended ASCII alphabet (excluding 0x00)
  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)
==> passed

Test 5a: check that inverseTransform(transform()) = original on text files
  * abra.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5a(TestBurrowsWheeler.java:628)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:781)

  * zebra.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5a(TestBurrowsWheeler.java:629)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:781)

  * cadabra.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5a(TestBurrowsWheeler.java:630)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:781)

  * amendments.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5a(TestBurrowsWheeler.java:631)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:781)

==> FAILED

Test 5b: check that inverseTransform(transform()) = original on corner-case text files
  * alphanum.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5b(TestBurrowsWheeler.java:638)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:784)

  * a.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5b(TestBurrowsWheeler.java:639)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:784)

  * stars.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5b(TestBurrowsWheeler.java:640)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:784)

  * couscous.txt

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5b(TestBurrowsWheeler.java:641)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:784)

==> FAILED

Test 5c: check that inverseTransform(transform()) = original on binary files
  * us.gif

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5c(TestBurrowsWheeler.java:648)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:787)

  * CS_bricks.jpg

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5c(TestBurrowsWheeler.java:649)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:787)

  * rand10K.bin

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:401)
    TestBurrowsWheeler.test5c(TestBurrowsWheeler.java:650)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:787)

==> FAILED

Test 5d: check that inverseTransform(tranform()) = original on random inputs
  * 10 random characters from binary alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5d(TestBurrowsWheeler.java:657)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:790)

    - failed on trial 1 of 100
    - input = 'BABABBAABB'

  * 10 random characters from DNA alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5d(TestBurrowsWheeler.java:658)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:790)

    - failed on trial 1 of 100
    - input = 'AGCTGCCACT'

  * 10 random characters from uppercase alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5d(TestBurrowsWheeler.java:659)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:790)

    - failed on trial 1 of 100
    - input = 'TNRWTHCMUY'

  * 1000 random characters from binary alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5d(TestBurrowsWheeler.java:660)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:790)

    - failed on trial 1 of 100

  * 1000 random characters from DNA alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5d(TestBurrowsWheeler.java:661)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:790)

    - failed on trial 1 of 100

  * 1000 random characters from uppercase alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5d(TestBurrowsWheeler.java:662)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:790)

    - failed on trial 1 of 100

==> FAILED

Test 5e: check that inverseTransform(tranform()) = original on random inputs
  * 1000 random characters from ASCII alphabet 

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5e(TestBurrowsWheeler.java:668)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:793)

    - failed on trial 1 of 100

  * 1000 random characters from extended ASCII alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5e(TestBurrowsWheeler.java:669)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:793)

    - failed on trial 1 of 100

  * 1000 random characters from extended ASCII alphabet (excluding 0x00)

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5e(TestBurrowsWheeler.java:670)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:793)

    - failed on trial 1 of 100

  * 1000 random characters from extended ASCII alphabet (excluding 0xFF)

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:444)
    TestBurrowsWheeler.test5e(TestBurrowsWheeler.java:671)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:793)

    - failed on trial 1 of 100

==> FAILED

Test 5f: check that inverseTransform(tranform()) = original
         on random inputs that are circular shifts of themselves
  * random strings from unary alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransformDegenerate(TestBurrowsWheeler.java:463)
    TestBurrowsWheeler.test5f(TestBurrowsWheeler.java:678)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:796)

    - failed on trial 1 of 2
    - input = 'AAAAAAAAAAAAAAA'

  * random strings from binary alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransformDegenerate(TestBurrowsWheeler.java:463)
    TestBurrowsWheeler.test5f(TestBurrowsWheeler.java:679)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:796)

    - failed on trial 1 of 100
    - input = 'BAABBBAABBBAABB'

  * random strings from DNA alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransformDegenerate(TestBurrowsWheeler.java:463)
    TestBurrowsWheeler.test5f(TestBurrowsWheeler.java:680)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:796)

    - failed on trial 1 of 100
    - input = 'TATTCTATTCTATTC'

  * random strings from uppercase alphabet

    java.util.NoSuchElementException: Reading from empty input stream

    edu.princeton.cs.algs4.BinaryStdIn.readChar(BinaryStdIn.java:156)
    edu.princeton.cs.algs4.BinaryStdIn.readInt(BinaryStdIn.java:265)
    BurrowsWheeler.inverseTransform(BurrowsWheeler.java:35)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransform(TestBurrowsWheeler.java:422)
    TestBurrowsWheeler.checkTransformConsistentWithInverseTransformDegenerate(TestBurrowsWheeler.java:463)
    TestBurrowsWheeler.test5f(TestBurrowsWheeler.java:681)
    TestBurrowsWheeler.main(TestBurrowsWheeler.java:796)

    - failed on trial 1 of 100
    - input = 'VPHZMVPHZM'

==> FAILED

Test 6a: check that transform() calls either close() or flush()
  * amendments.txt
    - student   length = 0
    - reference length = 18373
    - student:   
    - reference: 00 00 0e 2b 3a 2e 2e 2e 2e .. 69 69 69 69 69 69 69 69 69 

  * aesop.txt
    - student   length = 0
    - reference length = 191947
    - student:   
    - reference: 00 00 b3 3d 20 20 20 20 20 .. 69 69 65 61 61 61 75 75 75 

==> FAILED

Test 6b: check that inverseTransform() calls either close() or flush()
  * amendments.txt.bwt
  * aesop.txt.bwt
==> passed

Test 7a: check transform() on large files
  * rand100K.bin
    - student   length = 0
    - reference length = 100004
    - student:   
    - reference: 00 00 b1 0d f1 f8 81 ef d8 .. 8d 94 73 51 51 37 57 cf 91 

  * world192.txt
    - student   length = 0
    - reference length = 2473404
    - student:   
    - reference: 00 09 3a f0 0d 0d 0d 0d 0d .. 41 75 6f 49 20 20 6e 6e 28 

==> FAILED

Test 7b: check inverseTransform() on large files
  * rand100K.bin.bwt
  * world192.txt.bwt


WARNING: the time limit of 180 seconds was exceeded, so not all tests could be completed.



Total: 0/26 tests passed: Could not complete tests, which results in a reported score of 0.
================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of CircularSuffixArray
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of a CircularSuffixArray for a random string of length n.
Maximum allowed memory is 64n + 128.

                 n        bytes
-------------------------------
=> passed       16          776
=> passed       32         1448
=> passed       64         2792
=> passed      128         5480
=> passed      256        10856
=> passed      512        21608
=> passed     1024        43112
=> passed     2048        86120
=> passed     4096       172136
=> passed     8192       344168
==> 10/10 tests passed

Total: 10/10 tests passed!

Estimated student memory (bytes) = 42.00 n + 104.00   (R^2 = 1.000)
================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing CircularSuffixArray
*-----------------------------------------------------------
Running 26 total tests.

Tests  1-13: time to create a circular suffix array for the first
             n character of dickens.txt and call index(i) for each i

            [ max allowed time = 10 seconds and <= 12x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.01       0.00      15.42
=> passed     2000       0.00       0.00       4.41
=> passed     4000       0.01       0.00       3.64
=> passed     8000       0.01       0.00       2.90
=> passed    16000       0.02       0.00       3.87
=> passed    32000       0.06       0.01       5.24
=> FAILED    64000       0.11       0.01      12.67
=> passed   128000       0.23       0.03       9.04
=> FAILED   256000       0.39       0.03      13.63
=> passed   512000       0.74       0.06      11.64
=> FAILED  1024000       1.41       0.11      12.54
=> passed  2048000       2.99       0.29      10.34
=> passed  4096000       7.50       0.90       8.31

Estimated running time (using last 6 measurements)
    = 1.69e-06 * n^0.99  (R^2 = 0.99)


Tests 14-26: time to create circular suffix array for n random ASCII characters
            and call index(i) for each i

            [ max allowed time = 10 seconds and <= 20x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       4.38
=> passed     2000       0.00       0.00       3.37
=> passed     4000       0.00       0.00       2.72
=> passed     8000       0.00       0.00       2.16
=> passed    16000       0.01       0.00       6.19
=> passed    32000       0.02       0.00       8.61
=> passed    64000       0.04       0.00       9.92
=> passed   128000       0.08       0.01       8.17
=> passed   256000       0.26       0.06       4.48
=> passed   512000       0.57       0.05      10.51
=> passed  1024000       0.98       0.08      12.96
=> passed  2048000       2.71       0.21      12.81
=> passed  4096000       5.74       0.39      14.74

Estimated running time (using last 6 measurements)
    = 8.99e-08 * n^1.18  (R^2 = 0.99)


Total: 23/26 tests passed!


================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing MoveToFront
*-----------------------------------------------------------
Running 38 total tests.

Test 1: count calls to methods in BinaryStdOut from encode()
  * abra.txt
  * amendments.txt
==> passed

Test 2: count calls to methods in BinaryStdOut from decode()
  * abra.txt.mtf
  * amendments.txt.mtf
==> passed

Tests  3-12: Timing encode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.69
=> passed     2000       0.00       0.00       1.04
=> passed     4000       0.01       0.01       1.06
=> passed     8000       0.01       0.01       0.98
=> passed    16000       0.02       0.02       0.99
=> passed    32000       0.04       0.04       0.92
=> passed    64000       0.08       0.08       1.00
=> passed   128000       0.14       0.14       0.98
=> passed   256000       0.28       0.29       0.99

Estimated running time (using last 6 measurements)
     = 1.60e-06 * n^0.97  (R^2 = 1.00)


Tests  13-20: Timing encode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.99
=> passed     2000       0.00       0.00       0.95
=> passed     4000       0.00       0.00       0.97
=> passed     8000       0.01       0.01       0.94
=> passed    16000       0.02       0.02       0.93
=> passed    32000       0.03       0.03       0.93
=> passed    64000       0.08       0.07       1.14
=> passed   128000       0.13       0.14       0.92
=> passed   256000       0.23       0.25       0.91

Estimated running time (using last 6 measurements)
     = 1.04e-06 * n^1.00  (R^2 = 0.99)


Tests 21-29: Timing decode() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.98
=> passed     2000       0.00       0.00       0.94
=> passed     4000       0.00       0.00       0.92
=> passed     8000       0.01       0.01       0.93
=> passed    16000       0.02       0.02       0.95
=> passed    32000       0.03       0.03       0.95
=> passed    64000       0.06       0.06       0.94
=> passed   128000       0.12       0.13       0.94
=> passed   256000       0.32       0.35       0.94

Estimated running time (using last 6 measurements)
     = 6.29e-07 * n^1.04  (R^2 = 1.00)


Tests 30-38: Timing decode() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 4x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.98
=> passed     2000       0.00       0.00       0.92
=> passed     4000       0.00       0.01       0.92
=> passed     8000       0.01       0.01       0.93
=> passed    16000       0.02       0.02       0.93
=> passed    32000       0.03       0.04       0.92
=> passed    64000       0.06       0.06       0.87
=> passed   128000       0.13       0.15       0.82
=> passed   256000       0.26       0.29       0.91

Estimated running time (using last 6 measurements)
     = 1.97e-06 * n^0.94  (R^2 = 1.00)


Total: 38/38 tests passed!


================================================================



********************************************************************************
*  TIMING (substituting reference CircularSuffixArray)
********************************************************************************

Timing BurrowsWheeler
*-----------------------------------------------------------
Running 95 total tests.

Test 1: count calls to methods in CircularSuffixArray from transform()
  * abra.txt
    - transform() calls to index() = 0
    - minimum number of calls      = 12
    - maximum number of calls      = 36

  * amendments.txt
    - transform() calls to index() = 0
    - minimum number of calls      = 18369
    - maximum number of calls      = 55107

==> FAILED

Test 2: count calls to methods in CircularSuffixArray from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Test 3: count calls to methods in BinaryStdOut from transform()
  * abra.txt
    - transform() calls to write() = 0
    - minimum number of calls = 13
    - maximum number of calls = 13

  * amendments.txt
    - transform() calls to write() = 0
    - minimum number of calls = 18370
    - maximum number of calls = 18370

==> FAILED

Test 4: count calls to methods in BinaryStdOut from inverseTransform()
  * abra.txt.bwt
  * amendments.txt.bwt
==> passed

Tests  5-17: timing transform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.01
=> passed     2000       0.00       0.00       0.02
=> passed     4000       0.00       0.00       0.01
=> passed     8000       0.00       0.00       0.01
=> passed    16000       0.00       0.01       0.00
=> passed    32000       0.00       0.01       0.00
=> passed    64000       0.00       0.01       0.00
=> passed   128000       0.00       0.02       0.00
=> passed   256000       0.00       0.04       0.00
=> passed   512000       0.00       0.08       0.00
=> passed  1024000       0.00       0.16       0.00
=> passed  2048000       0.00       0.42       0.00
=> passed  4096000       0.00       0.93       0.00

Estimated running time as a function of n (using last 6 measurements)
    = 1.00e-07 * n^0.41  (R^2 = 0.47)


Tests 18-30: timing transform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.46
=> passed     2000       0.00       0.00       0.08
=> passed     4000       0.00       0.00       0.03
=> passed     8000       0.00       0.00       0.05
=> passed    16000       0.00       0.00       0.01
=> passed    32000       0.00       0.00       0.00
=> passed    64000       0.00       0.01       0.00
=> passed   128000       0.00       0.02       0.00
=> passed   256000       0.00       0.03       0.00
=> passed   512000       0.00       0.07       0.00
=> passed  1024000       0.00       0.15       0.00
=> passed  2048000       0.00       0.46       0.00
=> passed  4096000       0.00       1.13       0.00

Estimated running time as a function of n (using last 6 measurements)
    = 5.13e-06 * n^0.12  (R^2 = 0.19)


Tests 31-43: timing transform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       0.13
=> passed     2000       0.00       0.00       0.05
=> passed     4000       0.00       0.00       0.03
=> passed     8000       0.00       0.00       0.01
=> passed    16000       0.00       0.00       0.00
=> passed    32000       0.00       0.00       0.01
=> passed    64000       0.00       0.00       0.00
=> passed   128000       0.00       0.01       0.01
=> passed   256000       0.00       0.01       0.00
=> passed   512000       0.00       0.02       0.00
=> passed  1024000       0.00       0.04       0.00
=> passed  2048000       0.00       0.08       0.00
=> passed  4096000       0.00       0.13       0.00

Estimated running time as a function of n (using last 6 measurements)
    = 2.94e-06 * n^0.14  (R^2 = 0.14)


Tests 44-56: timing inverseTransform() with first n character of dickens.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       4.29
=> passed     2000       0.00       0.00       7.66
=> passed     4000       0.01       0.00      17.55
=> passed     8000       0.02       0.00      12.47
=> passed    16000       0.06       0.00      23.18
=> FAILED    32000       0.26       0.00     166.80
=> FAILED    64000       1.19       0.00     397.92
=> FAILED   128000       5.59       0.00    1403.75
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 1.30e-09 * n^1.86  (R^2 = 0.97)


Tests 57-69: timing inverseTransform() with first n character of random.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00       5.19
=> passed     2048       0.00       0.00      31.21
=> passed     4096       0.01       0.00      58.00
=> passed     8192       0.02       0.00     118.40
=> passed    16384       0.08       0.00     225.96
=> FAILED    32768       0.33       0.00     470.53
=> FAILED    65536       1.30       0.00     712.75
=> FAILED   131072       5.33       0.00    1379.27
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 3.38e-10 * n^1.99  (R^2 = 1.00)


Tests 70-82: timing inverseTransform() with first n character of abab.txt
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1000       0.00       0.00       9.39
=> passed     2000       0.00       0.00      24.96
=> passed     4000       0.00       0.00      30.33
=> passed     8000       0.02       0.00     106.95
=> passed    16000       0.07       0.00     211.79
=> FAILED    32000       0.30       0.00     434.09
=> FAILED    64000       1.18       0.00     529.16
=> FAILED   128000       4.85       0.00    1810.84
=> FAILED   256000
=> FAILED   512000
=> FAILED  1024000
=> FAILED  2048000
=> FAILED  4096000

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 3.19e-10 * n^1.99  (R^2 = 1.00)


Tests 83-95: timing inverseTransform() with first n character of cyclic.bin
             [ max allowed time = 2 seconds and <= 8x reference ]

                 n    student  reference      ratio
---------------------------------------------------
=> passed     1024       0.00       0.00      12.49
=> passed     2048       0.00       0.00      20.39
=> passed     4096       0.00       0.00      41.86
=> passed     8192       0.01       0.00      82.97
=> passed    16384       0.06       0.00     146.43
=> FAILED    32768       0.22       0.00     299.89
=> FAILED    65536       0.89       0.00     569.58
=> FAILED   131072       3.57       0.00     893.35
=> FAILED   262144
=> FAILED   524288
=> FAILED  1048576
=> FAILED  2097152
=> FAILED  4194304

==> FAILED.   inverseTransform() is possibly n^2 or worse.
Estimated running time as a function of n (using last 6 measurements)
    = 2.46e-10 * n^1.98  (R^2 = 1.00)


Total: 57/95 tests passed!


================================================================

