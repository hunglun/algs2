* DONE solve wordnet[100%]
1. [X] understand the problem
2. [X] create stub files
3. [X] watch the lectures (3h)
4. [X] implement SAP class (1h)
5. [X] implement wordnet class (1h)
6. [X] implement outcast class (1h)
7. [X] debug
8. [X] optimise
* DONE solve seam carving [100%]
1. [X] understand the problem
2. [X] watch the lectures (3h)
3. [X] create stub files
4. [X] implement SeamCarver.java (1h)
   - [X] Start by writing the constructor as well as picture(), width() and height(). These should be very easy.
   - [X] From there, write energy(). Calculating Δx2 and Δy2 are very similar. Using two private methods will keep your code simple. To test that your code works, use the client PrintEnergy described in the testing section above.
   - [X] To write findVerticalSeam(), you will want to first make sure you understand the topologial sort algorithm for computing a shortest path in a DAG. Do not create an EdgeWeightedDigraph. Instead construct a 2d energy array using the energy() method that you have already written. Your algorithm can traverse this matrix treating some select entries as reachable from (x, y) to calculate where the seam is located. To test that your code works, use the client PrintSeams described in the testing section above.
   - [X] To write findHorizontalSeam(), transpose the image, call findVerticalSeam(), and transpose it back.
   - [X] Now implement removeVerticalSeam(). Typically, this method will be called with the output of findVerticalSeam(), but be sure that they work for any seam. To test that your code words, use the client ResizeDemo described in the testing section above.
   - [X] To write removeHorizontalSeam(), transpose the image, call removeVerticalSeam(), and transpose it back.
5. [X] debug
6. [X] optimise

** DONE findVerticalSeam
- [X]  To write findVerticalSeam(), you will want to first make sure
  you understand the topologial sort algorithm for computing a
  shortest path in a DAG
- [X]  Do not create an EdgeWeightedDigraph
- [X]  Instead construct a 2d energy array using the energy() method
  that you have already written
- [X]  Your algorithm can traverse this matrix treating some select
  entries as reachable from (x, y) to calculate where the seam is
  located
- [X]  To test that your code works, use the client PrintSeams
  described in the testing section above



* DONE solve baseball elimination[100%]
1) [X] create stub files
2) [X] understand the problem
3) [X] understand the solution concept
4) [X] Write code to read in the input file and store the data.
5) [X] Draw by hand the FlowNetwork graph that you want to construct
   for a few small examples. Write the code to construct the
   FlowNetwork, print it out using the toString() method, and and make
   sure that it matches your intent. Do not continue until you have
   thoroughly tested this stage.
6) [X] Compute the maxflow and mincut using the FordFulkerson data
   type. You can access the value of the flow with the value() method;
   you can identify which vertices are on the source side of the
   mincut with the inCut() method.
7) [X] The BaseballElimination API contains the public methods that
   you will implement. For modularity, you will want to add some
   private helper methods of your own.
8) [X] add corner cases for invalid input
9) [X] debug
10) [X] optimise

* DONE solve boggle[100%]
1. [X] create stub files
2. [X] understand the problem
3. [X] understand the solution concept
4. [X] Familiarize yourself with the BoggleBoard.java data type.
5. [X] Use a standard set data type to represent the dictionary, e.g.,
   a SET<String>, a TreeSet<String>, or a HashSet<String>.
6. [X] Create the data type BoggleSolver. Write a method based on
   depth-first search to enumerate all strings that can be composed by
   following sequences of adjacent dice. That is, enumerate all simple
   paths in the Boggle graph (but there is no need to explicitly form
   the graph). For now, ignore the special two-letter sequence Qu.
7. [X] Now, implement the following critical backtracking
   optimization: when the current path corresponds to a string that is
   not a prefix of any word in the dictionary, there is no need to
   expand the path further. To do this, you will need to create a data
   structure for the dictionary that supports the prefix query
   operation: given a prefix, is there any word in the dictionary that
   starts with that prefix?
8. [X] Deal with the special two-letter sequence Qu.
9. [X] add corner cases for invalid input
10. [X] debug
11. [X] optimise

* TODO solve burrow wheeler[40%]
1. [X] Download the directory burrows to your system. It contains some
   sample input files and reference solutions. For convenience,
   burrows-testing.zip contains all of these files bundled together.
2. [X] Implement the CircularSuffixArray. Be sure not to create
   explicit copies of the string (e.g., via the substring() method in
   Java's String data type) when you sort the suffixes. That would
   take quadratic space. Instead for each suffix, you only need to
   keep an index that indicates which character is the beginning of
   the suffix. This way you can build the N suffixes in linear time
   and space. Then sort this array of indices. It's just like sorting
   an array of references.
3. [ ] Implement the Burrows-Wheeler transform, using the CircularSuffixArray class.
4. [ ] The Burrows-Wheeler decoding is the trickiest part, but it is
   very little code once you understand how it works. (Not including
   declarations and input, our solution is about 10 lines of code.)
   You may find the key-indexed counting algorithm from the string
   sorting lecture to be useful.
5. [ ] Implement the move-to-front encoding and decoding
   algorithms. Not including comments and declarations, our solutions
   are about 10 lines of code each. If yours is significantly longer,
   try to simplify it.

* TODO understand linear programming
* TODO understand intractability
