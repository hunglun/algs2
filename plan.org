* DONE solve wordnet[100%]
1. [X] understand the problem
2. [X] create stub files
3. [X] watch the lectures (3h)
4. [X] implement SAP class (1h)
5. [X] implement wordnet class (1h)
6. [X] implement outcast class (1h)
7. [X] debug
8. [X] optimise
* DONE solve seam carving [100%]
1. [X] understand the problem
2. [X] watch the lectures (3h)
3. [X] create stub files
4. [X] implement SeamCarver.java (1h)
   - [X] Start by writing the constructor as well as picture(), width() and height(). These should be very easy.
   - [X] From there, write energy(). Calculating Δx2 and Δy2 are very similar. Using two private methods will keep your code simple. To test that your code works, use the client PrintEnergy described in the testing section above.
   - [X] To write findVerticalSeam(), you will want to first make sure you understand the topologial sort algorithm for computing a shortest path in a DAG. Do not create an EdgeWeightedDigraph. Instead construct a 2d energy array using the energy() method that you have already written. Your algorithm can traverse this matrix treating some select entries as reachable from (x, y) to calculate where the seam is located. To test that your code works, use the client PrintSeams described in the testing section above.
   - [X] To write findHorizontalSeam(), transpose the image, call findVerticalSeam(), and transpose it back.
   - [X] Now implement removeVerticalSeam(). Typically, this method will be called with the output of findVerticalSeam(), but be sure that they work for any seam. To test that your code words, use the client ResizeDemo described in the testing section above.
   - [X] To write removeHorizontalSeam(), transpose the image, call removeVerticalSeam(), and transpose it back.
5. [X] debug
6. [X] optimise

** DONE findVerticalSeam
- [X]  To write findVerticalSeam(), you will want to first make sure
  you understand the topologial sort algorithm for computing a
  shortest path in a DAG
- [X]  Do not create an EdgeWeightedDigraph
- [X]  Instead construct a 2d energy array using the energy() method
  that you have already written
- [X]  Your algorithm can traverse this matrix treating some select
  entries as reachable from (x, y) to calculate where the seam is
  located
- [X]  To test that your code works, use the client PrintSeams
  described in the testing section above



* TODO solve baseball elimination[40%]
1) [X] create stub files
2) [X] understand the problem
3) [X] understand the solution concept
4) [X] Write code to read in the input file and store the data.
5) [ ] Draw by hand the FlowNetwork graph that you want to construct
   for a few small examples. Write the code to construct the
   FlowNetwork, print it out using the toString() method, and and make
   sure that it matches your intent. Do not continue until you have
   thoroughly tested this stage.
6) [ ] Compute the maxflow and mincut using the FordFulkerson data
   type. You can access the value of the flow with the value() method;
   you can identify which vertices are on the source side of the
   mincut with the inCut() method.
7) [ ] The BaseballElimination API contains the public methods that
   you will implement. For modularity, you will want to add some
   private helper methods of your own.
8) [ ] add corner cases for invalid input
9) [ ] debug
10) [ ] optimise

* TODO solve boggle
* TODO solve burrow wheeler
* TODO understand linear programming
* TODO understand intractability
