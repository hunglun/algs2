ASSESSMENT SUMMARY

Compilation:  PASSED (0 errors, 1 warning)
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 116 warnings)

Correctness:  12/13 tests passed
Memory:       0/3 tests passed
Timing:       7/9 tests passed

Aggregate score: 80.94%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
5.6K Jan  6 12:48 BoggleSolver.java
9.1K Jan  6 12:48 EnglishTrieST.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac BoggleSolver.java
*-----------------------------------------------------------
./EnglishTrieST.java:36: warning: [unchecked] unchecked cast
        return (Value) x.val;
                        ^
  required: Value
  found:    Object
  where Value is a type-variable:
    Value extends Object declared in class EnglishTrieST
1 warning


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
BoggleSolver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------


================================================================


% pmd .
*-----------------------------------------------------------
BoggleSolver.java:10: StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time). [AvoidStringBufferField]
BoggleSolver.java:14: The private instance (or static) variable 'st' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
BoggleSolver.java:25: String.indexOf(char) is faster than String.indexOf(String). [UseIndexOfChar]
BoggleSolver.java:31: The 'if' or 'else' clause appears to serve no purpose because its body is empty. [EmptyIfStmt]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BoggleSolver.java:11:27: To specify an array type, put the square brackets before the variable name, e.g., 'String[] args' instead of 'String args[]'. [ArrayTypeStyle]
[WARN] BoggleSolver.java:17:43: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:18:7: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:20:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:20:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:24:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:24:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:24:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:24:19: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:24:44: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:26:11: '(' is followed by whitespace. [ParenPad]
[WARN] BoggleSolver.java:28:11: 'else' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:28:11: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:29:13: '(' is followed by whitespace. [ParenPad]
[WARN] BoggleSolver.java:31:13: 'else' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:31:13: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:38:8: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:38:31: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:39:9: 'if' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:39:11: '!=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:39:13: '!=' is not followed by whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:39:18: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:40:35: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:41:36: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:42:10: 'else' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:42:10: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:42:14: 'else' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:42:14: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:43:20: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:48:21: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:49:20: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:50:30: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:56:54: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:58:7: '//' or '/*' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:60:46: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:61:10: 'for' is not followed by whitespace. [WhitespaceAfter]
[WARN] BoggleSolver.java:61:16: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:61:17: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] BoggleSolver.java:61:19: ';' is not followed by whitespace. [WhitespaceAfter]
...
Checkstyle ends with 0 errors and 116 warnings.


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of BoggleSolver
*-----------------------------------------------------------
Tests 1-9 create one BoggleSolver object corresponding to the specified
dictionary and call getAllValidWords() with several different boards
as arguments.

Running 13 total tests.

Test 1: check getAllValidWords() on two fixed 4-by-4 boards given in assignment
  * dictionary = dictionary-algs4.txt; board = board4x4.txt
  * dictionary = dictionary-algs4.txt; board = board-q.txt
==> passed

Test 2: check getAllValidWords() on fixed 4-by-4 boards
  * dictionary = dictionary-yawl.txt; board = board4x4.txt
  * dictionary = dictionary-yawl.txt; board = board-points1.txt
  * dictionary = dictionary-yawl.txt; board = board-points2.txt
  * dictionary = dictionary-yawl.txt; board = board-points3.txt
  * dictionary = dictionary-yawl.txt; board = board-points4.txt
  * dictionary = dictionary-yawl.txt; board = board-points5.txt
==> passed

Test 3: check getAllValidWords() on more fixed 4-by-4 boards
  * dictionary = dictionary-yawl.txt; board = board-points100.txt
  * dictionary = dictionary-yawl.txt; board = board-points200.txt
  * dictionary = dictionary-yawl.txt; board = board-points300.txt
  * dictionary = dictionary-yawl.txt; board = board-points400.txt
  * dictionary = dictionary-yawl.txt; board = board-points500.txt
  * dictionary = dictionary-yawl.txt; board = board-points750.txt
  * dictionary = dictionary-yawl.txt; board = board-points1000.txt
  * dictionary = dictionary-yawl.txt; board = board-points1250.txt
  * dictionary = dictionary-yawl.txt; board = board-points1500.txt
  * dictionary = dictionary-yawl.txt; board = board-points2000.txt
==> passed

Test 4: check getAllValidWords() on random Hasbro boards
  * dictionary = dictionary-yawl.txt; board = 10 random Hasbro boards
  * dictionary = dictionary-yawl.txt; board = 50 random Hasbro boards
  * dictionary = dictionary-yawl.txt; board = 100 random Hasbro boards
==> passed

Test 5: check getAllValidWords() on high-scoring n-by-n boards
  * dictionary = dictionary-yawl.txt; board = board-points4410.txt
  * dictionary = dictionary-yawl.txt; board = board-points4527.txt
  * dictionary = dictionary-yawl.txt; board = board-points13464.txt
  * dictionary = dictionary-yawl.txt; board = board-points26539.txt
==> passed

Test 6: check getAllValidWords() on exotic boards
  * dictionary = dictionary-yawl.txt; board = board-dodo.txt
  * dictionary = dictionary-yawl.txt; board = board-noon.txt
  * dictionary = dictionary-yawl.txt; board = board-couscous.txt
  * dictionary = dictionary-yawl.txt; board = board-rotavator.txt
  * dictionary = dictionary-yawl.txt; board = board-estrangers.txt
  * dictionary = dictionary-yawl.txt; board = board-antidisestablishmentarianisms.txt
  * dictionary = dictionary-yawl.txt; board = board-dichlorodiphenyltrichloroethanes.txt
  * dictionary = dictionary-yawl.txt; board = board-pneumonoultramicroscopicsilicovolcanoconiosis.txt
==> passed

Test 7: check getAllValidWords() on boards with a Q
  * dictionary = dictionary-yawl.txt; board = board-qwerty.txt
  * dictionary = dictionary-yawl.txt; board = board-quinquevalencies.txt
  * dictionary = dictionary-yawl.txt; board = board-inconsequentially.txt
  * dictionary = dictionary-yawl.txt; board = board-qaimaqam.txt
  * dictionary = dictionary-yawl.txt; board = board-aqua.txt
  * dictionary = dictionary-yawl.txt; board = 100 random Hasbro boards
  * dictionary = dictionary-16q.txt; board = board-9q.txt
  * dictionary = dictionary-16q.txt; board = board-16q.txt
==> passed

Test 8: check getAllValidWords() on random m-by-n boards
  * dictionary = dictionary-common.txt; board = 100 random 3-by-3 boards
  * dictionary = dictionary-common.txt; board = 100 random 4-by-4 boards
  * dictionary = dictionary-common.txt; board = 100 random 5-by-5 boards
  * dictionary = dictionary-common.txt; board = 20 random 5-by-10 boards
  * dictionary = dictionary-common.txt; board = 20 random 10-by-5 boards
==> passed

Test 9: check getAllValidWords() on random m-by-n boards
  * dictionary = dictionary-common.txt; board = 10 random 2-by-2 boards
  * dictionary = dictionary-common.txt; board = 10 random 1-by-10 boards
  * dictionary = dictionary-common.txt; board = 10 random 10-by-1 boards
  * dictionary = dictionary-common.txt; board = 10 random 1-by-1 boards
  * dictionary = dictionary-common.txt; board = 10 random 1-by-2 boards
  * dictionary = dictionary-common.txt; board = 10 random 2-by-1 boards
==> passed

Test 10: check getAllValidWords() on boards with no valid words
  * dictionary = dictionary-nursery.txt; board = board-points0.txt
  * dictionary = dictionary-2letters.txt; board = board-points4410.txt
==> passed

Test 11: mutating dictionary[] after passing to BoggleSolver constructor
  * dictionary = dictionary-algs4.txt
  * dictionary = dictionary-algs4.txt; board = 10 random Hasbro boards
==> passed

Test 12: create more than one BoggleSolver object at a time
         [ BoggleSolver object 1 uses dictionary-algs4.txt   ]
         [ BoggleSolver object 2 uses dictionary-nursery.txt ]
  * dictionary = dictionary-algs4.txt; board = 10 random Hasbro boards
  * dictionary = dictionary-nursery.txt; board = 10 random Hasbro boards
  * dictionary = dictionary-algs4.txt; board = 10 random Hasbro boards
==> passed

Test 13: check scoreOf() on various dictionaries
  * dictionary = dictionary-algs4.txt
    - word = 'DRIVES'
    - student   score = 3
    - reference score = 0
    - failed on trial 2 of 1000

  * dictionary = dictionary-common.txt
    - word = 'THERMALIZED'
    - student   score = 11
    - reference score = 0
    - failed on trial 2 of 5000

  * dictionary = dictionary-shakespeare.txt
    - word = 'VISCOSITY'
    - student   score = 11
    - reference score = 0
    - failed on trial 1 of 10000

  * dictionary = dictionary-nursery.txt
  * dictionary = dictionary-yawl.txt
    - word = 'RATCLIFF'
    - student   score = 11
    - reference score = 0
    - failed on trial 6 of 20000

==> FAILED


Total: 12/13 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of BoggleSolver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with dictionary-algs4.txt (must be <= 2x reference solution)
  * memory of dictionary[]           = 494472 bytes
  * memory of student   BoggleSolver = 13648176 bytes
  * memory of reference BoggleSolver = 5135408 bytes
  * student / reference              = 2.66
==> FAILED

Test 2: memory with dictionary-shakespeare.txt (must be <= 2x reference solution)
  * memory of dictionary[]           = 1925344 bytes
  * memory of student   BoggleSolver = 45891528 bytes
  * memory of reference BoggleSolver = 17475480 bytes
  * student / reference              = 2.63
==> FAILED

Test 3: memory with dictionary-yawl.txt (must be <= 2x reference solution)
  * memory of dictionary[]           = 22591328 bytes
  * memory of student   BoggleSolver = 462985144 bytes
  * memory of reference BoggleSolver = 178728384 bytes
  * student / reference              = 2.59
==> FAILED


Total: 0/3 tests passed!

================================================================



********************************************************************************
*  TIMING
********************************************************************************

Timing BoggleSolver
*-----------------------------------------------------------
All timing tests are for random 4-by-4 boards (using the Hasbro dice).
The dictionary is specified with each test.

Running 9 total tests.

Test 1: timing constructor (must be <= 5x reference solution)
 *  dictionary-algs4.txt
    - student   solution time (in seconds): 0.03
    - reference solution time (in seconds): 0.01
    - ratio:                                2.65

==> passed

 *  dictionary-enable2k.txt
    - student   solution time (in seconds): 0.23
    - reference solution time (in seconds): 0.11
    - ratio:                                2.06

==> passed

 *  dictionary-yawl.txt
    - student   solution time (in seconds): 0.08
    - reference solution time (in seconds): 0.03
    - ratio:                                2.85

==> passed

 *  dictionary-zingarelli2005.txt
    - student   solution time (in seconds): 0.13
    - reference solution time (in seconds): 0.20
    - ratio:                                0.67

==> passed

Test 2: timing getAllValidWords() for 5.0 seconds using dictionary-yawl.txt
        (must be <= 2x reference solution)
    - reference solution calls per second: 9014.08
    - student   solution calls per second: 1789.41
    - reference / student ratio:           5.04

=> passed    student <= 10000x reference
=> passed    student <=    25x reference
=> passed    student <=    10x reference
=> FAILED    student <=     5x reference
=> FAILED    student <=     2x reference


Total: 7/9 tests passed!


================================================================



